---
- hosts: localhost
  become: no
  vars:
    prefix: "kite-webhook"
    project: "composer"
    aws_profile: "{{ lookup('env', 'AWS_PROFILE') }}"
    aws_region: "{{ lookup('env', 'AWS_REGION') }}"
    sqs_policy_file: "{{ lookup('env', 'SQS_POLICY_FILE') }}"
    kms_policy_file: "{{ lookup('env', 'KMS_POLICY_FILE') }}"

  tasks:
    - name: deploy KMS
      amazon.aws.kms_key:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        alias: "{{ prefix }}-{{ project }}"
        description: "KMS for rhel for edge project, used by lambda env encrypt"
        enable_key_rotation: no
        enabled: yes
        key_spec: SYMMETRIC_DEFAULT
        key_usage: ENCRYPT_DECRYPT
        policy: "{{ lookup('file', kms_policy_file) | from_json }}"
        tags:
          kite: webhook
          name: "{{ prefix }}"
      register: kms_result

    - debug: var=kms_result

    - name: deploy SQS
      community.aws.sqs_queue:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        name: "{{ prefix }}-{{ project }}"
        visibility_timeout: 30
        message_retention_period: 86400
        maximum_message_size: 262144
        kms_master_key_id: "{{ kms_result.key_id }}"
        policy: "{{ lookup('file', sqs_policy_file) | from_json }}"
        tags:
          kite: webhook
          name: "{{ prefix }}-{{ project }}"

    - name: deploy prod S3 bucket
      amazon.aws.s3_bucket:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        name: "{{ prefix }}-prod"
        acl: "public-read"
        tags:
          kite: webhook
          name: "{{ prefix }}-prod"
      when: project != "dev"

    - name: deploy dev S3 bucket
      amazon.aws.s3_bucket:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        name: "{{ prefix }}-dev"
        acl: "public-read"
        tags:
          kite: webhook
          name: "{{ prefix }}-dev"
      when: project == "dev"

    - name: create temporary zip file folder
      tempfile:
        state: directory
        prefix: "zip-"
      register: temp_result

    - name: create a zip archive
      community.general.archive:
        path: "{{ playbook_dir }}/../webhook/webhook.py"
        dest: "{{ temp_result.path }}/webhook.zip"
        format: zip

    - name: deploy lambda function
      amazon.aws.lambda:
        name: "{{ prefix }}-{{ project }}"
        state: present
        zip_file: "{{ temp_result.path }}/webhook.zip"
        runtime: "python3.9"
        role: "{{ role }}"
        handler: "webhook.kite_webhook_handler"
        architecture: "x86_64"
        kms_key_arn: "{{ kms_result.key_arn }}"
        environment_variables:
          GITHUB_APP_WEBHOOK_SECRET: !vault |
            $ANSIBLE_VAULT;1.2;AES256;GITHUB_APP_WEBHOOK_SECRET
            30643438643462666631643332656531336638333133323461613738363161373430343137303430
            3164336432346337353134386237643830653839383037390a373235316261616565643864626330
            36393636653131633963346432336663643661323233386135653530633539323336373137646137
            6633306464643362370a626237306532306238633434333363643630323261633233663432326563
            32356638613265386338623535383365356434626435643236613030393564626563323533333661
            3165386463353531323831343364343564613736343739663961
          SQS_QUEUE: !vault |
            $ANSIBLE_VAULT;1.2;AES256;SQS_QUEUE
            30653763306131666430373364396130666538656537343231306339343131643336396266363034
            6366316465383963333136323139653362623661336665620a393233346565336464656561333564
            30366464636165633036633765346637313934366638343036663264393137623437623737306262
            3638326162343633310a656161323566333330383564393032666635326135343734326138343731
            36353237656138373133616234633161643566633836386232636562326436633466
        tags:
          kite: webhook
          name: "{{ prefix }}"
      register: lambda_result

    - name: wait until function state is Active
      amazon.aws.lambda_info:
        function_name: "{{ prefix }}-{{ project }}"
        query: all
      register: version_result
      retries: 30
      delay: 2
      until: version_result.functions[0].state == "Active"

    - set_fact:
        function_arn: "{{ version_result.functions[0].function_arn }}"

    - name: publish lambda function
      command: aws lambda publish-version --function-name "{{ prefix }}-{{ project }}" --output json --profile kite --region "{{ aws_region }}" --query "Version"
      register: publish_result

    - name: configure function alias
      amazon.aws.lambda_alias:
        name: "{{ project }}"
        function_name: "{{ prefix }}-{{ project }}"
        function_version: "{{ publish_result.stdout | replace('\"', '') | int }}"

    # One api gateway can serve multi routes and integrations
    - name: check api existing or not
      command: aws apigatewayv2 get-apis --profile kite --region "{{ aws_region }}" --query "Items[*].Name"
      register: apis_result

    - debug:
        var: apis_result

    - name: get api gateway api id
      command: aws apigatewayv2 get-apis --profile kite --region "{{ aws_region }}" --query "Items[?Name=='{{ prefix }}-prod'].ApiId"
      register: api_id_result
      when: "'{{ prefix }}-prod' in apis_result.stdout"

    - set_fact:
        api_id: "{{ api_id_result.stdout | from_json | json_query('[0]') }}"
      when: "'{{ prefix }}-prod' in apis_result.stdout"

    - name: create prod api gateway
      command: aws apigatewayv2 create-api --name "{{ prefix }}-prod" --protocol-type HTTP --tags "kite=webhook,name={{ prefix }}" --output json --profile kite --region "{{ aws_region }}"
      register: gateway_result
      when: "'{{ prefix }}-prod' not in apis_result.stdout"

    - set_fact:
        api_id: "{{ gateway_result.stdout | from_json | json_query('ApiId') }}"
      when: "'{{ prefix }}-prod' not in apis_result.stdout"

    # new integration for one lambda function:alias
    - name: create integration
      command: aws apigatewayv2 create-integration --api-id "{{ api_id }}" --integration-type AWS_PROXY --integration-uri "{{ function_arn }}:${stageVariables.env_name}" --payload-format-version 2.0 --output json --profile kite --region "{{ aws_region }}" --query "IntegrationId"
      register: integration_result

    # each integration needs a route
    - name: create route
      command: aws apigatewayv2 create-route --api-id "{{ api_id }}" --route-key "POST /{{ prefix }}-{{ project }}" --target "integrations/{{ integration_result.stdout | replace('\"', '') }}" --profile kite --region "{{ aws_region }}"

    # different stage with different stage variable for invoking different lambda function:alias
    - name: create stage
      command: aws apigatewayv2 create-stage --api-id "{{ api_id }}" --stage-name "{{ project }}" --auto-deploy --stage-variables "env_name={{ project }}" --tags "kite=webhook,name={{ prefix }}" --profile kite --region "{{ aws_region }}"

    - set_fact:
        temp_id: "{{ function_arn.split(':')[4] }}"

    # each integration needs its own policy for function invoke coming from api gateway integration
    - name: add policy for api gateway to lunch function
      command: aws lambda add-permission --function-name "{{ function_arn }}:{{ project }}" --source-arn "arn:aws:execute-api:{{ aws_region }}:{{ temp_id }}:{{ api_id }}/*/*/{{ prefix }}-{{ project }}" --principal apigateway.amazonaws.com --statement-id apigateway-access --action lambda:InvokeFunction --profile kite --region "{{ aws_region }}"
